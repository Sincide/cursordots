# =============================================================================
# Fish Shell Configuration - Dynamic Theming System
# =============================================================================
# Description: Main fish shell configuration
# Author: Dotfiles Dynamic Theming System
# =============================================================================

# Source dynamic theme colors (generated by theme engine)
if test -f ~/.config/fish/theme.fish
    source ~/.config/fish/theme.fish
end

# =============================================================================
# General Configuration
# =============================================================================

# Disable welcome message
set fish_greeting

# Set default editor
set -gx EDITOR nvim
set -gx VISUAL nvim

# Set terminal
set -gx TERM foot

# =============================================================================
# Path Configuration
# =============================================================================

# Add user bins to PATH
fish_add_path -p ~/.local/bin
fish_add_path -p ~/.config/scripts

# =============================================================================
# Aliases
# =============================================================================

# System
alias ll 'ls -la'
alias la 'ls -la'
alias l 'ls -l'
alias .. 'cd ..'
alias ... 'cd ../..'
alias grep 'grep --color=auto'

# Package management
alias pac 'sudo pacman'
alias pacs 'pacman -Ss'
alias pacq 'pacman -Q'
alias pacu 'sudo pacman -Syu'
alias yayu 'yay -Syu'
alias pui 'pacui'

# Git
alias g 'git'
alias gs 'git status'
alias ga 'git add'
alias gc 'git commit'
alias gp 'git push'
alias gl 'git pull'
alias gd 'git diff'
alias gco 'git checkout'

# System monitoring
alias top 'btop'
alias htop 'btop'

# Theming shortcuts
alias theme-pick 'wallpaper-picker.sh'
alias theme-apply 'theme-applier.sh'
alias theme-reload 'theme-applier.sh --reload'

# =============================================================================
# Functions
# =============================================================================

# Create and enter directory
function mkcd
    mkdir -p $argv[1] && cd $argv[1]
end

# Extract various archive types
function extract
    if test -f $argv[1]
        switch $argv[1]
            case '*.tar.bz2'
                tar xjf $argv[1]
            case '*.tar.gz'
                tar xzf $argv[1]
            case '*.bz2'
                bunzip2 $argv[1]
            case '*.rar'
                unrar x $argv[1]
            case '*.gz'
                gunzip $argv[1]
            case '*.tar'
                tar xf $argv[1]
            case '*.tbz2'
                tar xjf $argv[1]
            case '*.tgz'
                tar xzf $argv[1]
            case '*.zip'
                unzip $argv[1]
            case '*.Z'
                uncompress $argv[1]
            case '*.7z'
                7z x $argv[1]
            case '*'
                echo "Don't know how to extract '$argv[1]'"
        end
    else
        echo "'$argv[1]' is not a valid file"
    end
end

# =============================================================================
# Prompt Configuration
# =============================================================================

# Use Starship prompt if available, otherwise use simple prompt
if command -v starship > /dev/null
    starship init fish | source
else
    # Simple fallback prompt
    function fish_prompt
        set -l last_status $status
        set -l cwd (prompt_pwd)
        
        # Show current directory
        set_color $fish_color_cwd
        echo -n $cwd
        set_color normal
        
        # Show git branch if in git repo
        if command -v git > /dev/null
            set -l git_branch (git branch 2>/dev/null | grep '^\*' | cut -d' ' -f2-)
            if test -n "$git_branch"
                set_color $fish_color_comment
                echo -n " ($git_branch)"
                set_color normal
            end
        end
        
        # Show prompt symbol
        if test $last_status -eq 0
            set_color $fish_color_command
            echo -n ' ❯ '
        else
            set_color $fish_color_error
            echo -n ' ✗ '
        end
        set_color normal
    end
end

# =============================================================================
# Auto-completion and History
# =============================================================================

# Enable vi key bindings (optional, uncomment if preferred)
# fish_vi_key_bindings

# History configuration
set -g fish_history_size 10000

# =============================================================================
# Environment Variables
# =============================================================================

# XDG directories
set -gx XDG_CONFIG_HOME ~/.config
set -gx XDG_DATA_HOME ~/.local/share
set -gx XDG_CACHE_HOME ~/.cache

# Wayland
set -gx MOZ_ENABLE_WAYLAND 1
set -gx QT_QPA_PLATFORM wayland

# Development
set -gx MANPAGER 'nvim +Man!'

# =============================================================================
# Startup Commands
# =============================================================================

# Display system info on new shell (optional)
# if command -v neofetch > /dev/null
#     neofetch
# end 